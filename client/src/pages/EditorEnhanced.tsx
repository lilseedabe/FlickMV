import React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useParams } from 'react-router-dom';\n\n// Components\nimport MediaLibrary from '../components/media/MediaLibrary';\nimport BeatTimeline from '../components/timeline/BeatTimeline';\nimport Preview from '../components/preview/Preview';\nimport PropertiesPanel from '../components/editor/PropertiesPanel';\nimport PlaybackControls from '../components/editor/PlaybackControls';\nimport BPMDetector from '../components/audio/BPMDetector';\nimport FrequencyAnalyzer from '../components/audio/FrequencyAnalyzer';\nimport PresetLibrary from '../components/presets/PresetLibrary';\nimport SNSOptimizer from '../components/sns/SNSOptimizer';\nimport EditRecipesPanel from '../components/recipes/EditRecipesPanel';\n\nimport { \n  Play, \n  Pause, \n  SkipBack, \n  SkipForward,\n  Volume2,\n  Settings,\n  Download,\n  Upload,\n  Layers,\n  Eye,\n  EyeOff,\n  Type,\n  Image,\n  Video,\n  Music,\n  Scissors,\n  RotateCw,\n  Move,\n  Zap,\n  Sparkles,\n  HelpCircle,\n  ChevronRight,\n  ChevronDown,\n  X,\n  AlignCenter,\n  AlignLeft,\n  AlignRight,\n  Move3D,\n  Square,\n  Circle,\n  Crown,\n  Lock,\n  Star,\n  Info,\n  AlertCircle,\n  Share2,\n  BarChart3,\n  Wand2\n} from 'lucide-react';\n\n// Types\nimport type { \n  ProjectEnhanced, \n  TimelineClip, \n  MediaFile, \n  BPMAnalysis, \n  BeatGrid,\n  MusicPreset,\n  PresetCategory,\n  FrequencyTrigger,\n  SNSPreset,\n  EditRecipe,\n  AudioTrackEnhanced\n} from '../types';

// サンプルデータのインポート
import { 
  SAMPLE_PRESETS, 
  SAMPLE_CATEGORIES, 
  SAMPLE_RECIPES,
  SAMPLE_SNS_PRESETS,
  getPresetsForBPM
} from '../data/sampleData';\n\n// Mock data - 拡張版プロジェクト（サンプルデータと統合）\nconst mockProjectEnhanced: ProjectEnhanced = {\n  id: '1',\n  name: 'Summer Vibes MV Enhanced',\n  description: 'A vibrant music video with advanced audio sync features',\n  createdAt: new Date('2024-01-15'),\n  updatedAt: new Date('2024-01-20'),\n  settings: {\n    resolution: '9:16',\n    frameRate: 30,\n    duration: 45,\n    outputFormat: {\n      container: 'mp4',\n      videoCodec: 'h264',\n      audioBitrate: 128,\n      videoBitrate: 5000,\n      quality: 'high'\n    }\n  },\n  timeline: {\n    clips: [\n      {\n        id: 'clip1',\n        mediaId: 'media1',\n        startTime: 0,\n        duration: 5,\n        trimStart: 0,\n        trimEnd: 5,\n        layer: 0,\n        effects: [\n          {\n            id: 'effect1',\n            type: 'pan_zoom',\n            parameters: { zoom: 1.2, panX: 0.1, panY: 0.1 },\n            enabled: true\n          }\n        ]\n      },\n      {\n        id: 'clip2',\n        mediaId: 'media2',\n        startTime: 5,\n        duration: 4,\n        trimStart: 0,\n        trimEnd: 4,\n        layer: 0,\n        transitions: {\n          in: { type: 'crossfade', duration: 0.5 }\n        }\n      }\n    ],\n    audioTracks: [\n      {\n        id: 'audio1',\n        mediaId: 'audio1',\n        startTime: 0,\n        duration: 45,\n        volume: 0.8,\n        bpm: 128,\n        beats: [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4],\n        bpmAnalysis: {\n          bpm: 128,\n          confidence: 0.95,\n          beatTimes: [0, 0.46875, 0.9375, 1.40625, 1.875, 2.34375, 2.8125, 3.28125, 3.75],\n          bars: [0, 1.875, 3.75, 5.625, 7.5],\n          timeSignature: { numerator: 4, denominator: 4 }\n        },\n        frequencyTriggers: [],\n        beatGrid: {\n          enabled: true,\n          snapToBeat: true,\n          snapToBar: false,\n          subdivisions: 4,\n          quantizeStrength: 0.8\n        }\n      } as AudioTrackEnhanced\n    ],\n    duration: 45,\n    zoom: 1,\n    playheadPosition: 0,\n    beatGrid: {\n      enabled: true,\n      snapToBeat: true,\n      snapToBar: false,\n      subdivisions: 4,\n      quantizeStrength: 0.8\n    },\n    editRecipes: [],\n    snapSettings: {\n      snapToBeat: true,\n      snapToBar: false,\n      snapToGrid: true,\n      magneticSnap: true,\n      snapDistance: 10\n    }\n  },\n  mediaLibrary: [\n    {\n      id: 'media1',\n      name: 'sunset-beach.jpg',\n      type: 'image',\n      url: 'https://via.placeholder.com/1080x1920/ff6b6b/ffffff?text=Sunset+Beach',\n      thumbnail: 'https://via.placeholder.com/150x200/ff6b6b/ffffff?text=Sunset',\n      size: 2048000,\n      width: 1080,\n      height: 1920,\n      format: 'jpg',\n      uploadedAt: new Date('2024-01-15')\n    },\n    {\n      id: 'media2',\n      name: 'palm-trees.jpg',\n      type: 'image',\n      url: 'https://via.placeholder.com/1080x1920/4ecdc4/ffffff?text=Palm+Trees',\n      thumbnail: 'https://via.placeholder.com/150x200/4ecdc4/ffffff?text=Palm',\n      size: 1856000,\n      width: 1080,\n      height: 1920,\n      format: 'jpg',\n      uploadedAt: new Date('2024-01-16')\n    },\n    {\n      id: 'audio1',\n      name: 'summer-beat.mp3',\n      type: 'audio',\n      url: '/assets/audio/summer-beat.mp3',\n      duration: 45,\n      size: 4200000,\n      format: 'mp3',\n      uploadedAt: new Date('2024-01-17'),\n      metadata: {\n        bitrate: 320,\n        channels: 2\n      }\n    }\n  ],\n  presets: {\n    applied: [],\n    favorites: []\n  },\n  snsOptimization: {\n    autoOptimize: false\n  },\n  frequencyAnalysis: {\n    enabled: false,\n    realTimeMode: false,\n    triggers: [],\n    history: []\n  }\n};\n\n// Mock presets and categories\nconst mockPresets: MusicPreset[] = [\n  {\n    id: 'preset1',\n    name: 'Summer Vibes',\n    description: 'Bright and energetic preset perfect for summer content',\n    genre: 'Pop',\n    bpmRange: [120, 140],\n    thumbnail: 'https://via.placeholder.com/200x150/ff6b6b/ffffff?text=Summer',\n    difficulty: 'beginner',\n    tags: ['summer', 'bright', 'energetic'],\n    effects: [],\n    transitions: [],\n    colorGrading: {\n      brightness: 10,\n      contrast: 15,\n      saturation: 20,\n      temperature: 5,\n      tint: 0\n    },\n    animationStyle: 'energetic',\n    beatSync: true,\n    uses: 1234,\n    rating: 4.8,\n    premium: false,\n    createdAt: new Date('2024-01-01'),\n    author: 'FlickMV Team'\n  }\n];\n\nconst mockCategories: PresetCategory[] = [\n  {\n    id: 'pop',\n    name: 'Pop',\n    description: 'Upbeat and mainstream',\n    icon: 'music',\n    color: '#ff6b6b',\n    presets: mockPresets\n  }\n];\n\nconst EditorEnhanced: React.FC = () => {\n  const { projectId } = useParams();\n  const [project, setProject] = useState<ProjectEnhanced>(mockProjectEnhanced);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playheadPosition, setPlayheadPosition] = useState(0);\n  const [selectedClip, setSelectedClip] = useState<TimelineClip | null>(null);\n  const [zoom, setZoom] = useState(1);\n  const [showTutorial, setShowTutorial] = useState(false);\n  const [tutorialStep, setTutorialStep] = useState(0);\n  const [activePanel, setActivePanel] = useState<'media' | 'presets' | 'recipes' | 'frequency' | 'sns' | 'export'>('media');\n  const [audioContext, setAudioContext] = useState<AudioContext | null>(null);\n  const [audioBuffer, setAudioBuffer] = useState<AudioBuffer | null>(null);\n  \n  // Mock user data\n  const [user] = useState({\n    id: 'user1',\n    plan: 'free', // free, basic, pro, premium\n    canRemoveWatermark: false,\n    exportStats: {\n      currentMonth: 2,\n      total: 15,\n      limit: 5,\n      remaining: 3\n    }\n  });\n\n  // Refs for panel resizing\n  const leftPanelRef = useRef<HTMLDivElement>(null);\n  const rightPanelRef = useRef<HTMLDivElement>(null);\n\n  const tutorialSteps = [\n    {\n      title: \"音響解析機能\",\n      description: \"新しいBPM検出と周波数解析機能で、音楽に完璧に同期した動画を作成できます\",\n      target: \"audio-features\"\n    },\n    {\n      title: \"ビートスナップタイムライン\",\n      description: \"ビートマーカーとスナップ機能で、クリップを音楽に正確に合わせられます\",\n      target: \"beat-timeline\"\n    },\n    {\n      title: \"プリセットライブラリ\",\n      description: \"BPMに最適化されたプリセットで、プロ品質のエフェクトを簡単適用\",\n      target: \"preset-library\"\n    },\n    {\n      title: \"Edit Recipes\",\n      description: \"ビート同期の自動編集レシピで、初心者でもプロらしい仕上がりに\",\n      target: \"edit-recipes\"\n    },\n    {\n      title: \"SNS最適化\",\n      description: \"InstagramやTikTokなど、各プラットフォーム向けに自動最適化\",\n      target: \"sns-optimizer\"\n    }\n  ];\n  \n  const currentTutorialStep = (tutorialSteps[tutorialStep] ?? tutorialSteps[0])!;\n\n  // BPM検出の処理\n  const handleBPMDetected = (analysis: BPMAnalysis) => {\n    const updatedAudioTrack: AudioTrackEnhanced = {\n      ...project.timeline.audioTracks[0],\n      bpmAnalysis: analysis,\n      bpm: analysis.bpm\n    };\n    \n    const updatedTimeline = {\n      ...project.timeline,\n      audioTracks: [updatedAudioTrack]\n    };\n    \n    setProject(prev => ({\n      ...prev,\n      timeline: updatedTimeline\n    }));\n  };\n\n  // ビートグリッド設定の更新\n  const handleBeatGridChange = (grid: BeatGrid) => {\n    setProject(prev => ({\n      ...prev,\n      timeline: {\n        ...prev.timeline,\n        beatGrid: grid\n      }\n    }));\n  };\n\n  // プリセット適用\n  const handlePresetSelect = (preset: MusicPreset) => {\n    console.log('プリセット適用:', preset.name);\n    // 実際の実装では、プリセットのエフェクトをプロジェクトに適用\n  };\n\n  // Edit Recipe適用\n  const handleRecipeApply = (recipe: EditRecipe, clip: TimelineClip) => {\n    console.log('レシピ適用:', recipe.name, 'to clip:', clip.id);\n    // 実際の実装では、レシピの処理をクリップに適用\n  };\n\n  // SNS最適化適用\n  const handleSNSOptimization = (settings: SNSPreset) => {\n    console.log('SNS最適化適用:', settings.name);\n    setProject(prev => ({\n      ...prev,\n      snsOptimization: {\n        ...prev.snsOptimization,\n        targetPlatform: settings.platform,\n        customSettings: settings\n      }\n    }));\n  };\n\n  const handleMediaUpload = (files: FileList) => {\n    console.log('Uploading files:', files);\n  };\n\n  const handleClipSelect = (clip: TimelineClip) => {\n    setSelectedClip(clip);\n  };\n\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleTimeUpdate = (time: number) => {\n    setPlayheadPosition(time);\n  };\n\n  const nextTutorialStep = () => {\n    if (tutorialStep < tutorialSteps.length - 1) {\n      setTutorialStep(tutorialStep + 1);\n    } else {\n      setShowTutorial(false);\n      setTutorialStep(0);\n    }\n  };\n\n  const skipTutorial = () => {\n    setShowTutorial(false);\n    setTutorialStep(0);\n  };\n\n  useEffect(() => {\n    const hasSeenEnhancedTutorial = localStorage.getItem('hasSeenEnhancedEditorTutorial');\n    if (!hasSeenEnhancedTutorial) {\n      setShowTutorial(true);\n      localStorage.setItem('hasSeenEnhancedEditorTutorial', 'true');\n    }\n\n    // AudioContextの初期化\n    const ctx = new (window.AudioContext || (window as any).webkitAudioContext)();\n    setAudioContext(ctx);\n  }, []);\n\n  // 現在のオーディオトラックの取得\n  const currentAudioTrack = project.timeline.audioTracks[0] as AudioTrackEnhanced | undefined;\n  const currentBPMAnalysis = currentAudioTrack?.bpmAnalysis;\n\n  return (\n    <div className=\"h-screen flex flex-col bg-dark-900 text-white overflow-hidden\">\n      {/* Tutorial Overlay */}\n      <AnimatePresence>\n        {showTutorial && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center\"\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              className=\"bg-dark-800 rounded-2xl p-6 max-w-md w-full m-4 border border-purple-500/30\"\n            >\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Sparkles className=\"w-6 h-6 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-white mb-2\">\n                  {currentTutorialStep.title}\n                </h3>\n                <p className=\"text-gray-300 mb-6\">\n                  {currentTutorialStep.description}\n                </p>\n                <div className=\"flex items-center justify-center space-x-2 mb-6\">\n                  {tutorialSteps.map((_, index) => (\n                    <div\n                      key={index}\n                      className={`w-2 h-2 rounded-full ${\n                        index === tutorialStep ? 'bg-purple-500' : 'bg-gray-600'\n                      }`}\n                    />\n                  ))}\n                </div>\n                <div className=\"flex space-x-3\">\n                  <button\n                    onClick={skipTutorial}\n                    className=\"flex-1 bg-dark-700 text-gray-300 py-2 px-4 rounded-lg font-medium hover:bg-dark-600 transition-all\"\n                  >\n                    スキップ\n                  </button>\n                  <button\n                    onClick={nextTutorialStep}\n                    className=\"flex-1 bg-purple-500 text-white py-2 px-4 rounded-lg font-medium hover:bg-purple-600 transition-all flex items-center justify-center space-x-1\"\n                  >\n                    <span>{tutorialStep < tutorialSteps.length - 1 ? '次へ' : '完了'}</span>\n                    {tutorialStep < tutorialSteps.length - 1 && <ChevronRight className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Header */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-dark-800 border-b border-dark-700 px-6 py-3 flex items-center justify-between\"\n      >\n        <div className=\"flex items-center space-x-4\">\n          <h1 className=\"text-lg font-semibold\">{project.name}</h1>\n          <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n            <span>●</span>\n            <span>自動保存</span>\n          </div>\n          {!user.canRemoveWatermark && (\n            <div className=\"flex items-center space-x-2 bg-yellow-500/20 text-yellow-400 px-2 py-1 rounded-lg text-sm\">\n              <Lock className=\"w-3 h-3\" />\n              <span>FlickMV透かし付き</span>\n            </div>\n          )}\n          {/* BPM情報表示 */}\n          {currentBPMAnalysis && (\n            <div className=\"flex items-center space-x-2 bg-purple-500/20 text-purple-400 px-3 py-1.5 rounded-lg text-sm\">\n              <Music className=\"w-3 h-3\" />\n              <span>{currentBPMAnalysis.bpm} BPM</span>\n              <span className=\"text-xs opacity-70\">({currentBPMAnalysis.confidence * 100}%)</span>\n            </div>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"text-sm text-gray-400\">\n            エクスポート残り: {user.exportStats.remaining}/{user.exportStats.limit}\n          </div>\n          <button\n            onClick={() => setShowTutorial(true)}\n            className=\"flex items-center space-x-2 bg-dark-700 hover:bg-dark-600 px-3 py-1.5 rounded-lg text-sm transition-all\"\n          >\n            <HelpCircle className=\"w-4 h-4\" />\n            <span>ヘルプ</span>\n          </button>\n          <button className=\"bg-green-500 hover:bg-green-600 px-4 py-1.5 rounded-lg text-sm font-medium transition-all flex items-center space-x-2\">\n            <Download className=\"w-4 h-4\" />\n            <span>エクスポート</span>\n          </button>\n        </div>\n      </motion.div>\n\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Left Panel */}\n        <motion.div\n          initial={{ x: -300 }}\n          animate={{ x: 0 }}\n          className=\"w-80 bg-dark-800 border-r border-dark-700 flex flex-col\"\n          id=\"audio-features\"\n          ref={leftPanelRef}\n        >\n          <div className=\"p-4 border-b border-dark-700\">\n            <div className=\"flex space-x-1 mb-4\">\n              {[\n                { id: 'media', label: 'メディア', icon: Image },\n                { id: 'presets', label: 'プリセット', icon: Sparkles },\n                { id: 'recipes', label: 'レシピ', icon: Wand2 },\n                { id: 'frequency', label: '周波数', icon: BarChart3 },\n                { id: 'sns', label: 'SNS', icon: Share2 },\n                { id: 'export', label: 'エクスポート', icon: Download }\n              ].map(tab => {\n                const Icon = tab.icon;\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActivePanel(tab.id as any)}\n                    className={`flex items-center space-x-1 px-2 py-2 rounded-lg text-xs transition-all ${\n                      activePanel === tab.id ? 'bg-purple-500 text-white' : 'text-gray-400 hover:text-white hover:bg-dark-700'\n                    }`}\n                  >\n                    <Icon className=\"w-3 h-3\" />\n                    <span>{tab.label}</span>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"flex-1 overflow-hidden\">\n            {activePanel === 'media' && (\n              <div className=\"h-full flex flex-col\">\n                <div className=\"p-4\">\n                  <button className=\"w-full bg-purple-500 hover:bg-purple-600 text-white py-3 px-4 rounded-lg font-medium transition-all flex items-center justify-center space-x-2 mb-4\">\n                    <Upload className=\"w-5 h-5\" />\n                    <span>ファイルをアップロード</span>\n                  </button>\n                </div>\n                \n                {/* BPM検出コンポーネント */}\n                {project.mediaLibrary.find(m => m.type === 'audio') && (\n                  <div className=\"px-4 mb-4\">\n                    <BPMDetector\n                      audioFile={project.mediaLibrary.find(m => m.type === 'audio')!}\n                      onBPMDetected={handleBPMDetected}\n                      onAnalysisStart={() => console.log('BPM解析開始')}\n                      onAnalysisComplete={() => console.log('BPM解析完了')}\n                      onError={(error) => console.error('BPM解析エラー:', error)}\n                    />\n                  </div>\n                )}\n                \n                <div className=\"flex-1 px-4\">\n                  <MediaLibrary \n                    mediaFiles={project.mediaLibrary}\n                    onUpload={handleMediaUpload}\n                  />\n                </div>\n              </div>\n            )}\n\n            {activePanel === 'presets' && (\n              <div id=\"preset-library\" className=\"h-full\">\n                <PresetLibrary\n                  presets={mockPresets}\n                  categories={mockCategories}\n                  onPresetSelect={handlePresetSelect}\n                  onPresetFavorite={(id) => console.log('お気に入り:', id)}\n                  onGenreFilter={(genre) => console.log('ジャンルフィルター:', genre)}\n                  onBPMFilter={(range) => console.log('BPMフィルター:', range)}\n                />\n              </div>\n            )}\n\n            {activePanel === 'recipes' && (\n              <div id=\"edit-recipes\" className=\"h-full\">\n                <EditRecipesPanel\n                  recipes={[]}\n                  selectedClip={selectedClip}\n                  bpmAnalysis={currentBPMAnalysis}\n                  onRecipeApply={handleRecipeApply}\n                  onRecipePreview={(recipe) => console.log('レシピプレビュー:', recipe.name)}\n                />\n              </div>\n            )}\n\n            {activePanel === 'frequency' && audioContext && audioBuffer && (\n              <div className=\"p-4\">\n                <FrequencyAnalyzer\n                  audioContext={audioContext}\n                  audioBuffer={audioBuffer}\n                  onAnalysisUpdate={(analysis) => console.log('周波数解析:', analysis)}\n                  triggers={[]}\n                  onTriggerFired={(id, intensity) => console.log('トリガー発動:', id, intensity)}\n                  realTime={false}\n                />\n              </div>\n            )}\n\n            {activePanel === 'sns' && (\n              <div id=\"sns-optimizer\" className=\"h-full\">\n                <SNSOptimizer\n                  project={project}\n                  targetPlatforms={['instagram', 'tiktok', 'youtube_shorts']}\n                  onOptimizationApply={handleSNSOptimization}\n                  onPreviewGenerate={(platform) => console.log('プレビュー生成:', platform)}\n                />\n              </div>\n            )}\n\n            {activePanel === 'export' && (\n              <div className=\"p-4\">\n                <h3 className=\"text-lg font-semibold mb-4\">エクスポート設定</h3>\n                \n                {user.exportStats.remaining <= 1 && (\n                  <div className=\"bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-3 mb-4\">\n                    <div className=\"flex items-start space-x-2\">\n                      <AlertCircle className=\"w-4 h-4 text-yellow-400 mt-0.5\" />\n                      <div className=\"text-sm\">\n                        <p className=\"text-yellow-400 font-medium\">エクスポート制限間近</p>\n                        <p className=\"text-gray-300\">残り {user.exportStats.remaining} 回です</p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">解像度</label>\n                    <select className=\"w-full bg-dark-700 border border-dark-600 rounded-lg px-3 py-2\">\n                      <option>1080p (推奨)</option>\n                      <option>720p</option>\n                      {user.plan === 'pro' || user.plan === 'premium' ? (\n                        <option>4K</option>\n                      ) : (\n                        <option disabled>4K (プロプラン以上)</option>\n                      )}\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">フォーマット</label>\n                    <select className=\"w-full bg-dark-700 border border-dark-600 rounded-lg px-3 py-2\">\n                      <option>MP4</option>\n                      <option>MOV</option>\n                      <option>AVI</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </motion.div>\n\n        {/* Center Area */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Preview Area */}\n          <motion.div\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"h-64 bg-dark-850 border-b border-dark-700 flex items-center justify-center relative\"\n            id=\"preview-area\"\n          >\n            <div className=\"relative w-48 h-56 bg-black rounded-lg overflow-hidden\">\n              <Preview \n                project={project}\n                playheadPosition={playheadPosition}\n                isPlaying={isPlaying}\n              />\n            </div>\n          </motion.div>\n\n          {/* Playback Controls */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.2 }}\n            className=\"bg-dark-800 border-b border-dark-700 p-4\"\n          >\n            <PlaybackControls\n              isPlaying={isPlaying}\n              currentTime={playheadPosition}\n              duration={project.timeline.duration}\n              onPlayPause={handlePlayPause}\n              onTimeChange={handleTimeUpdate}\n            />\n          </motion.div>\n\n          {/* Enhanced Timeline Area */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"flex-1 bg-dark-900\"\n            id=\"beat-timeline\"\n          >\n            <BeatTimeline\n              timeline={project.timeline}\n              playheadPosition={playheadPosition}\n              zoom={zoom}\n              onClipSelect={handleClipSelect}\n              onTimelineUpdate={(timeline) => \n                setProject(prev => ({ ...prev, timeline }))\n              }\n              onPlayheadChange={setPlayheadPosition}\n              bpmAnalysis={currentBPMAnalysis}\n              beatGrid={project.timeline.beatGrid}\n              onBeatGridChange={handleBeatGridChange}\n              showBeatMarkers={true}\n              showBarMarkers={true}\n            />\n          </motion.div>\n        </div>\n\n        {/* Right Panel - Properties */}\n        <motion.div\n          initial={{ x: 300 }}\n          animate={{ x: 0 }}\n          className=\"w-80 bg-dark-800 border-l border-dark-700 flex flex-col\"\n          id=\"effects-panel\"\n          ref={rightPanelRef}\n        >\n          <div className=\"p-4 border-b border-dark-700\">\n            <h2 className=\"text-lg font-semibold\">プロパティ</h2>\n          </div>\n          <div className=\"flex-1 overflow-hidden\">\n            <PropertiesPanel\n              selectedClip={selectedClip}\n              projectSettings={project.settings}\n              onClipUpdate={(updatedClip) => {\n                const updatedTimeline = {\n                  ...project.timeline,\n                  clips: project.timeline.clips.map(clip =>\n                    clip.id === updatedClip.id ? updatedClip : clip\n                  )\n                };\n                setProject(prev => ({ ...prev, timeline: updatedTimeline }));\n              }}\n              onSettingsUpdate={(settings) => {\n                setProject(prev => ({ ...prev, settings }));\n              }}\n            />\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Status Bar */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.3 }}\n        className=\"bg-dark-800 border-t border-dark-700 px-6 py-2 flex items-center justify-between text-sm text-dark-400\"\n      >\n        <div className=\"flex items-center space-x-6\">\n          <span>解像度: {project.settings.resolution}</span>\n          <span>FPS: {project.settings.frameRate}</span>\n          <span>継続時間: {Math.floor(project.timeline.duration / 60)}:{(project.timeline.duration % 60).toFixed(0).padStart(2, '0')}</span>\n          {currentBPMAnalysis && (\n            <span>BPM: {currentBPMAnalysis.bpm} ({Math.round(currentBPMAnalysis.confidence * 100)}%)</span>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-6\">\n          <span>クリップ: {project.timeline.clips.length}</span>\n          <span>プラン: {user.plan}</span>\n          <span>透かし: {!user.canRemoveWatermark ? '有効' : '無効'}</span>\n          <span className=\"text-green-400\">● 自動保存済み</span>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default EditorEnhanced;"