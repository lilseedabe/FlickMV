import React, { useState, useCallback, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Music, \n  Play, \n  Pause, \n  Loader, \n  CheckCircle, \n  AlertCircle, \n  Info,\n  Volume2,\n  BarChart3,\n  Zap\n} from 'lucide-react';\n\nimport { BPMDetectorProps, BPMAnalysis, MediaFile } from '../../types';\nimport { BPMDetector, loadAudioFile } from '../../utils/audio/bpmDetector';\n\n/**\n * BPM検出コンポーネント\n * 初心者にもわかりやすいUI/UXを提供\n */\nconst BPMDetectorComponent: React.FC<BPMDetectorProps> = ({\n  audioFile,\n  onBPMDetected,\n  onAnalysisStart,\n  onAnalysisComplete,\n  onError\n}) => {\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [result, setResult] = useState<BPMAnalysis | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioContext, setAudioContext] = useState<AudioContext | null>(null);\n  const [audioBuffer, setAudioBuffer] = useState<AudioBuffer | null>(null);\n\n  // BPM検出の実行\n  const detectBPM = useCallback(async () => {\n    if (!audioFile) return;\n\n    try {\n      setIsAnalyzing(true);\n      setError(null);\n      setProgress(0);\n      onAnalysisStart?.();\n\n      console.log('🎵 BPM検出を開始します');\n      \n      // 進行状況の更新（UI向け）\n      setProgress(20);\n      \n      // 音声ファイルをAudioBufferに変換\n      const buffer = await loadAudioFile(new File([audioFile.url], audioFile.name));\n      setAudioBuffer(buffer);\n      setProgress(40);\n      \n      // BPM検出器の作成と実行\n      const detector = new BPMDetector();\n      setProgress(60);\n      \n      const analysis = await detector.detectBPM(buffer);\n      setProgress(80);\n      \n      // 結果の保存と通知\n      setResult(analysis);\n      onBPMDetected(analysis);\n      setProgress(100);\n      \n      console.log('✅ BPM検出完了:', analysis);\n      \n      // クリーンアップ\n      detector.dispose();\n      onAnalysisComplete?.();\n      \n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'BPM検出中にエラーが発生しました';\n      setError(errorMessage);\n      onError?.(errorMessage);\n      console.error('❌ BPM検出エラー:', err);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  }, [audioFile, onBPMDetected, onAnalysisStart, onAnalysisComplete, onError]);\n\n  // 音声プレビュー再生\n  const togglePlayback = useCallback(async () => {\n    if (!audioBuffer) return;\n\n    try {\n      if (isPlaying) {\n        // 停止\n        audioContext?.suspend();\n        setIsPlaying(false);\n      } else {\n        // 再生\n        const ctx = new AudioContext();\n        const source = ctx.createBufferSource();\n        source.buffer = audioBuffer;\n        source.connect(ctx.destination);\n        source.start();\n        \n        setAudioContext(ctx);\n        setIsPlaying(true);\n        \n        // 再生終了時の処理\n        source.onended = () => {\n          setIsPlaying(false);\n        };\n      }\n    } catch (err) {\n      console.error('音声再生エラー:', err);\n    }\n  }, [audioBuffer, audioContext, isPlaying]);\n\n  // ヘルプテキスト\n  const getHelpText = () => {\n    if (isAnalyzing) return 'BPMを解析中です。少々お待ちください...';\n    if (result) return 'BPMの検出が完了しました！タイムラインでビートマーカーを確認できます。';\n    if (error) return 'エラーが発生しました。音声ファイルを確認してもう一度お試しください。';\n    return 'このボタンを押すと、楽曲のテンポ（BPM）を自動検出します。';\n  };\n\n  return (\n    <div className=\"bg-dark-800 rounded-xl p-6 border border-dark-700\">\n      {/* ヘッダー */}\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center\">\n          <Music className=\"w-5 h-5 text-white\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-white\">BPM検出</h3>\n          <p className=\"text-sm text-gray-400\">楽曲のテンポを自動で解析</p>\n        </div>\n      </div>\n\n      {/* 音声ファイル情報 */}\n      <div className=\"bg-dark-700 rounded-lg p-4 mb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Volume2 className=\"w-4 h-4 text-purple-400\" />\n            <div>\n              <p className=\"text-sm font-medium text-white\">{audioFile.name}</p>\n              <p className=\"text-xs text-gray-400\">\n                {audioFile.duration ? `${Math.floor(audioFile.duration / 60)}:${(audioFile.duration % 60).toFixed(0).padStart(2, '0')}` : '不明'}\n                {audioFile.size && ` • ${(audioFile.size / (1024 * 1024)).toFixed(1)}MB`}\n              </p>\n            </div>\n          </div>\n          \n          {/* プレビュー再生ボタン */}\n          {audioBuffer && (\n            <button\n              onClick={togglePlayback}\n              className=\"flex items-center space-x-1 bg-purple-500 hover:bg-purple-600 text-white px-3 py-1.5 rounded-lg text-sm transition-all\"\n            >\n              {isPlaying ? <Pause className=\"w-3 h-3\" /> : <Play className=\"w-3 h-3\" />}\n              <span>{isPlaying ? '停止' : '試聴'}</span>\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* BPM検出ボタン */}\n      <button\n        onClick={detectBPM}\n        disabled={isAnalyzing}\n        className={`w-full py-3 px-4 rounded-lg font-medium transition-all flex items-center justify-center space-x-2 ${\n          isAnalyzing\n            ? 'bg-gray-600 cursor-not-allowed'\n            : result\n            ? 'bg-green-500 hover:bg-green-600'\n            : 'bg-purple-500 hover:bg-purple-600'\n        } text-white`}\n      >\n        {isAnalyzing ? (\n          <>\n            <Loader className=\"w-4 h-4 animate-spin\" />\n            <span>解析中... {progress}%</span>\n          </>\n        ) : result ? (\n          <>\n            <CheckCircle className=\"w-4 h-4\" />\n            <span>再検出</span>\n          </>\n        ) : (\n          <>\n            <BarChart3 className=\"w-4 h-4\" />\n            <span>BPMを検出</span>\n          </>\n        )}\n      </button>\n\n      {/* 進行状況バー */}\n      <AnimatePresence>\n        {isAnalyzing && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"mt-3\"\n          >\n            <div className=\"w-full bg-dark-700 rounded-full h-2\">\n              <motion.div\n                className=\"bg-purple-500 h-2 rounded-full\"\n                style={{ width: `${progress}%` }}\n                transition={{ duration: 0.3 }}\n              />\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* 結果表示 */}\n      <AnimatePresence>\n        {result && (\n          <motion.div\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            className=\"mt-4 bg-green-500/10 border border-green-500/30 rounded-lg p-4\"\n          >\n            <div className=\"flex items-center space-x-2 mb-3\">\n              <CheckCircle className=\"w-4 h-4 text-green-400\" />\n              <span className=\"text-sm font-medium text-green-400\">検出完了</span>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-white\">{result.bpm}</div>\n                <div className=\"text-xs text-gray-400\">BPM</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-white\">{Math.round(result.confidence * 100)}%</div>\n                <div className=\"text-xs text-gray-400\">信頼度</div>\n              </div>\n            </div>\n            \n            <div className=\"mt-3 pt-3 border-t border-green-500/20\">\n              <div className=\"flex items-center justify-between text-xs text-gray-300\">\n                <span>ビート数: {result.beatTimes.length}</span>\n                <span>小節数: {result.bars.length}</span>\n                <span>拍子: {result.timeSignature.numerator}/{result.timeSignature.denominator}</span>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* エラー表示 */}\n      <AnimatePresence>\n        {error && (\n          <motion.div\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            className=\"mt-4 bg-red-500/10 border border-red-500/30 rounded-lg p-4\"\n          >\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <AlertCircle className=\"w-4 h-4 text-red-400\" />\n              <span className=\"text-sm font-medium text-red-400\">エラー</span>\n            </div>\n            <p className=\"text-sm text-gray-300\">{error}</p>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* ヘルプテキスト */}\n      <div className=\"mt-4 flex items-start space-x-2 text-xs text-gray-400\">\n        <Info className=\"w-3 h-3 mt-0.5 flex-shrink-0\" />\n        <p>{getHelpText()}</p>\n      </div>\n\n      {/* BPM検出後の機能案内 */}\n      <AnimatePresence>\n        {result && (\n          <motion.div\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            className=\"mt-4 bg-purple-500/10 border border-purple-500/30 rounded-lg p-3\"\n          >\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Zap className=\"w-3 h-3 text-purple-400\" />\n              <span className=\"text-xs font-medium text-purple-400\">次のステップ</span>\n            </div>\n            <div className=\"text-xs text-gray-300 space-y-1\">\n              <p>• タイムラインでビートマーカーを確認できます</p>\n              <p>• ビートスナップ機能でクリップを正確に配置</p>\n              <p>• BPMに合わせたプリセットを使用可能</p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default BPMDetectorComponent;"