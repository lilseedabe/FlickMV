import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  BarChart3, \n  Volume2, \n  Zap, \n  Settings, \n  Play, \n  Pause,\n  TrendingUp,\n  TrendingDown,\n  Activity,\n  Eye,\n  EyeOff,\n  Plus,\n  Trash2,\n  AlertCircle,\n  Info\n} from 'lucide-react';\n\nimport { \n  FrequencyAnalyzerProps,\n  AudioAnalysis,\n  FrequencyTrigger,\n  FrequencyBand,\n  FREQUENCY_BANDS\n} from '../../types';\n\n/**\n * リアルタイム周波数解析コンポーネント\n * 低域・高域トリガーでエフェクトを自動発動\n */\nconst FrequencyAnalyzer: React.FC<FrequencyAnalyzerProps> = ({\n  audioContext,\n  audioBuffer,\n  onAnalysisUpdate,\n  triggers,\n  onTriggerFired,\n  realTime = false\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const sourceRef = useRef<AudioBufferSourceNode | null>(null);\n  const animationRef = useRef<number | null>(null);\n  \n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [currentAnalysis, setCurrentAnalysis] = useState<AudioAnalysis | null>(null);\n  const [activeTriggers, setActiveTriggers] = useState<Set<string>>(new Set());\n  const [triggerHistory, setTriggerHistory] = useState<Array<{ triggerId: string; timestamp: number; intensity: number }>>([]); \n  const [showSettings, setShowSettings] = useState(false);\n  const [sensitivity, setSensitivity] = useState(0.7);\n  const [visualizationMode, setVisualizationMode] = useState<'spectrum' | 'bands' | 'waveform'>('spectrum');\n\n  // スペクトラムビジュアライザーの描画\n  const drawSpectrum = useCallback((dataArray: Uint8Array) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    \n    const width = canvas.width;\n    const height = canvas.height;\n    \n    // キャンバスをクリア\n    ctx.fillStyle = 'rgb(15, 23, 42)'; // dark-900\n    ctx.fillRect(0, 0, width, height);\n    \n    if (visualizationMode === 'spectrum') {\n      // スペクトラム表示\n      const barWidth = width / dataArray.length;\n      let x = 0;\n      \n      for (let i = 0; i < dataArray.length; i++) {\n        const barHeight = (dataArray[i] / 255) * height;\n        \n        // 周波数に応じた色分け\n        const hue = (i / dataArray.length) * 240; // 0-240度（赤→青）\n        ctx.fillStyle = `hsl(${hue}, 70%, 60%)`;\n        \n        ctx.fillRect(x, height - barHeight, barWidth - 1, barHeight);\n        x += barWidth;\n      }\n    } else if (visualizationMode === 'bands') {\n      // 周波数帯域表示\n      const bandNames = Object.keys(FREQUENCY_BANDS);\n      const barWidth = width / bandNames.length;\n      \n      bandNames.forEach((name, index) => {\n        const [lowHz, highHz] = FREQUENCY_BANDS[name as keyof typeof FREQUENCY_BANDS];\n        const sampleRate = audioContext.sampleRate;\n        const nyquist = sampleRate / 2;\n        const binSize = nyquist / dataArray.length;\n        \n        const lowBin = Math.floor(lowHz / binSize);\n        const highBin = Math.floor(highHz / binSize);\n        \n        // 該当範囲の平均値を計算\n        let sum = 0;\n        for (let i = lowBin; i <= highBin && i < dataArray.length; i++) {\n          sum += dataArray[i];\n        }\n        const average = sum / (highBin - lowBin + 1);\n        const barHeight = (average / 255) * height;\n        \n        // 帯域に応じた色\n        const colors = {\n          BASS: '#ef4444',\n          MIDS: '#eab308', \n          HIGHS: '#3b82f6',\n          SUB_BASS: '#dc2626',\n          KICK: '#f97316',\n          SNARE: '#84cc16',\n          VOCALS: '#06b6d4',\n          PRESENCE: '#8b5cf6',\n          BRILLIANCE: '#ec4899'\n        };\n        \n        ctx.fillStyle = colors[name as keyof typeof colors] || '#6b7280';\n        ctx.fillRect(index * barWidth, height - barHeight, barWidth - 2, barHeight);\n        \n        // ラベル表示\n        ctx.fillStyle = '#9ca3af';\n        ctx.font = '10px monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText(\n          name.slice(0, 4), \n          index * barWidth + barWidth / 2, \n          height - 5\n        );\n      });\n    }\n    \n    // トリガーインジケーター\n    if (activeTriggers.size > 0) {\n      ctx.fillStyle = 'rgba(239, 68, 68, 0.3)';\n      ctx.fillRect(0, 0, width, height);\n      \n      ctx.fillStyle = '#ef4444';\n      ctx.font = '14px bold';\n      ctx.textAlign = 'center';\n      ctx.fillText('TRIGGER!', width / 2, 30);\n    }\n  }, [audioContext.sampleRate, visualizationMode, activeTriggers]);\n\n  // リアルタイム解析ループ\n  const analyzeLoop = useCallback(() => {\n    if (!analyserRef.current) return;\n    \n    const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);\n    analyserRef.current.getByteFrequencyData(dataArray);\n    \n    // 周波数帯域の解析\n    const frequencyBands: FrequencyBand[] = [];\n    const sampleRate = audioContext.sampleRate;\n    const nyquist = sampleRate / 2;\n    const binSize = nyquist / dataArray.length;\n    \n    Object.entries(FREQUENCY_BANDS).forEach(([name, range]) => {\n      const [lowHz, highHz] = range;\n      const lowBin = Math.floor(lowHz / binSize);\n      const highBin = Math.floor(highHz / binSize);\n      \n      let energy = 0;\n      for (let i = lowBin; i <= highBin && i < dataArray.length; i++) {\n        energy += dataArray[i];\n      }\n      energy /= (highBin - lowBin + 1);\n      \n      const normalizedEnergy = energy / 255;\n      const threshold = sensitivity;\n      const triggered = normalizedEnergy > threshold;\n      \n      frequencyBands.push({\n        name,\n        range: [lowHz, highHz],\n        energy: normalizedEnergy,\n        threshold,\n        triggered\n      });\n      \n      // トリガー処理\n      if (triggered) {\n        const matchingTriggers = triggers.filter(trigger => {\n          if (trigger.band === 'custom' && trigger.customRange) {\n            const [customLow, customHigh] = trigger.customRange;\n            return lowHz >= customLow && highHz <= customHigh;\n          }\n          return trigger.band === name.toLowerCase();\n        });\n        \n        matchingTriggers.forEach(trigger => {\n          if (trigger.enabled && !activeTriggers.has(trigger.id)) {\n            setActiveTriggers(prev => new Set([...prev, trigger.id]));\n            onTriggerFired(trigger.id, normalizedEnergy);\n            \n            // トリガー履歴に追加\n            setTriggerHistory(prev => [\n              ...prev.slice(-9), // 最新10件を保持\n              { \n                triggerId: trigger.id, \n                timestamp: Date.now(), \n                intensity: normalizedEnergy \n              }\n            ]);\n            \n            // クールダウン処理\n            setTimeout(() => {\n              setActiveTriggers(prev => {\n                const newSet = new Set(prev);\n                newSet.delete(trigger.id);\n                return newSet;\n              });\n            }, trigger.duration * 1000);\n          }\n        });\n      }\n    });\n    \n    // 解析結果の更新\n    const analysis: AudioAnalysis = {\n      frequencyBands,\n      rms: Math.sqrt(dataArray.reduce((sum, val) => sum + val * val, 0) / dataArray.length) / 255,\n      peak: Math.max(...dataArray) / 255,\n      spectralCentroid: 0, // 簡略化\n      zcr: 0 // 簡略化\n    };\n    \n    setCurrentAnalysis(analysis);\n    onAnalysisUpdate(analysis);\n    \n    // スペクトラム描画\n    drawSpectrum(dataArray);\n    \n    if (isAnalyzing) {\n      animationRef.current = requestAnimationFrame(analyzeLoop);\n    }\n  }, [audioContext.sampleRate, sensitivity, triggers, activeTriggers, onTriggerFired, onAnalysisUpdate, drawSpectrum, isAnalyzing]);\n\n  // 解析開始\n  const startAnalysis = useCallback(async () => {\n    try {\n      // アナライザーの設定\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 2048;\n      analyser.smoothingTimeConstant = 0.8;\n      analyserRef.current = analyser;\n      \n      if (realTime) {\n        // リアルタイム解析（マイク入力など）\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const source = audioContext.createMediaStreamSource(stream);\n        source.connect(analyser);\n      } else {\n        // オーディオバッファーからの解析\n        const source = audioContext.createBufferSource();\n        source.buffer = audioBuffer;\n        source.connect(analyser);\n        source.connect(audioContext.destination);\n        source.start();\n        sourceRef.current = source;\n      }\n      \n      setIsAnalyzing(true);\n      analyzeLoop();\n    } catch (error) {\n      console.error('周波数解析開始エラー:', error);\n    }\n  }, [audioContext, audioBuffer, realTime, analyzeLoop]);\n\n  // 解析停止\n  const stopAnalysis = useCallback(() => {\n    setIsAnalyzing(false);\n    \n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n      animationRef.current = null;\n    }\n    \n    if (sourceRef.current) {\n      sourceRef.current.stop();\n      sourceRef.current = null;\n    }\n    \n    setActiveTriggers(new Set());\n  }, []);\n\n  // コンポーネントのクリーンアップ\n  useEffect(() => {\n    return () => {\n      stopAnalysis();\n    };\n  }, [stopAnalysis]);\n\n  return (\n    <div className=\"bg-dark-800 rounded-xl border border-dark-700 overflow-hidden\">\n      {/* ヘッダー */}\n      <div className=\"p-4 border-b border-dark-700\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-orange-500 rounded-lg flex items-center justify-center\">\n              <BarChart3 className=\"w-4 h-4 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-white\">周波数解析</h3>\n              <p className=\"text-sm text-gray-400\">リアルタイム音響トリガー</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => setShowSettings(!showSettings)}\n              className=\"p-2 bg-dark-700 hover:bg-dark-600 text-gray-400 hover:text-white rounded-lg transition-all\"\n            >\n              <Settings className=\"w-4 h-4\" />\n            </button>\n            \n            <button\n              onClick={isAnalyzing ? stopAnalysis : startAnalysis}\n              className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all ${\n                isAnalyzing\n                  ? 'bg-red-500 hover:bg-red-600 text-white'\n                  : 'bg-orange-500 hover:bg-orange-600 text-white'\n              }`}\n            >\n              {isAnalyzing ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n              <span>{isAnalyzing ? '停止' : '開始'}</span>\n            </button>\n          </div>\n        </div>\n\n        {/* 設定パネル */}\n        <AnimatePresence>\n          {showSettings && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"pt-3 border-t border-dark-700\"\n            >\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-400 mb-2\">\n                    感度: {Math.round(sensitivity * 100)}%\n                  </label>\n                  <input\n                    type=\"range\"\n                    min={0.1}\n                    max={1.0}\n                    step={0.1}\n                    value={sensitivity}\n                    onChange={(e) => setSensitivity(Number(e.target.value))}\n                    className=\"w-full\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-400 mb-2\">\n                    表示モード\n                  </label>\n                  <select\n                    value={visualizationMode}\n                    onChange={(e) => setVisualizationMode(e.target.value as any)}\n                    className=\"w-full bg-dark-700 border border-dark-600 rounded px-3 py-2 text-sm text-white\"\n                  >\n                    <option value=\"spectrum\">スペクトラム</option>\n                    <option value=\"bands\">周波数帯域</option>\n                  </select>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* スペクトラムビジュアライザー */}\n      <div className=\"p-4\">\n        <canvas\n          ref={canvasRef}\n          width={400}\n          height={200}\n          className=\"w-full h-48 bg-dark-900 rounded-lg border border-dark-600\"\n        />\n      </div>\n\n      {/* 現在の解析値 */}\n      {currentAnalysis && (\n        <div className=\"p-4 border-t border-dark-700\">\n          <div className=\"grid grid-cols-3 gap-4 mb-4\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-white\">\n                {Math.round(currentAnalysis.rms * 100)}%\n              </div>\n              <div className=\"text-xs text-gray-400\">RMS レベル</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-white\">\n                {Math.round(currentAnalysis.peak * 100)}%\n              </div>\n              <div className=\"text-xs text-gray-400\">ピーク</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-white\">\n                {activeTriggers.size}\n              </div>\n              <div className=\"text-xs text-gray-400\">アクティブ</div>\n            </div>\n          </div>\n          \n          {/* 周波数帯域の詳細 */}\n          <div className=\"space-y-2\">\n            {currentAnalysis.frequencyBands.map((band, index) => (\n              <div key={index} className=\"flex items-center space-x-3\">\n                <div className=\"w-16 text-xs text-gray-400 font-mono\">\n                  {band.name.slice(0, 6)}\n                </div>\n                <div className=\"flex-1 bg-dark-700 rounded-full h-2\">\n                  <div\n                    className={`h-2 rounded-full transition-all ${\n                      band.triggered ? 'bg-red-500' : 'bg-blue-500'\n                    }`}\n                    style={{ width: `${band.energy * 100}%` }}\n                  />\n                </div>\n                <div className=\"w-12 text-xs text-gray-400 text-right\">\n                  {Math.round(band.energy * 100)}%\n                </div>\n                {band.triggered && (\n                  <Zap className=\"w-3 h-3 text-red-400\" />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* トリガー履歴 */}\n      {triggerHistory.length > 0 && (\n        <div className=\"p-4 border-t border-dark-700\">\n          <h4 className=\"text-sm font-medium text-white mb-3 flex items-center space-x-2\">\n            <Activity className=\"w-4 h-4\" />\n            <span>最近のトリガー</span>\n          </h4>\n          <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n            {triggerHistory.slice(-5).reverse().map((trigger, index) => (\n              <div key={index} className=\"flex items-center justify-between text-xs\">\n                <span className=\"text-gray-400\">\n                  {new Date(trigger.timestamp).toLocaleTimeString()}\n                </span>\n                <span className=\"text-white\">{trigger.triggerId}</span>\n                <span className=\"text-orange-400\">\n                  {Math.round(trigger.intensity * 100)}%\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* ヘルプ */}\n      <div className=\"p-4 border-t border-dark-700\">\n        <div className=\"flex items-start space-x-2 text-xs text-gray-400\">\n          <Info className=\"w-3 h-3 mt-0.5 flex-shrink-0\" />\n          <div>\n            <p className=\"mb-1\">\n              周波数解析により音楽の特定の帯域（低音、高音など）に反応してエフェクトを自動発動します。\n            </p>\n            <p>\n              感度を調整して、トリガーする閾値を変更できます。\n              {isAnalyzing ? '解析中です。' : '\"開始\"ボタンを押して解析を始めてください。'}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FrequencyAnalyzer;"