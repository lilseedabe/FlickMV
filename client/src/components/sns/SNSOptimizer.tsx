import React, { useState, useMemo, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Instagram, \n  Share2, \n  Smartphone, \n  Monitor, \n  Square, \n  Settings, \n  Crop,\n  Maximize,\n  Minimize,\n  CheckCircle,\n  AlertTriangle,\n  Info,\n  Download,\n  Eye,\n  Zap,\n  Clock,\n  FileText,\n  Volume2\n} from 'lucide-react';\n\nimport { \n  SNSOptimizerProps,\n  SNSPreset,\n  ProjectEnhanced\n} from '../../types';\n\n// SNSプラットフォームのプリセット定義\nconst SNS_PRESETS: Record<string, SNSPreset> = {\n  instagram_reel: {\n    id: 'instagram_reel',\n    platform: 'instagram',\n    name: 'Instagram リール',\n    aspectRatio: '9:16',\n    resolution: { width: 1080, height: 1920 },\n    maxDuration: 90,\n    maxFileSize: 100,\n    recommendedBitrate: 5000,\n    audioCodec: 'aac',\n    videoCodec: 'h264',\n    frameRate: [24, 30],\n    safeArea: { top: 15, bottom: 20, left: 5, right: 5 },\n    requirements: {\n      maxDuration: 90,\n      audioRequired: true,\n      captionsRecommended: true\n    },\n    optimization: {\n      cropStrategy: 'smart',\n      scaleStrategy: 'fill',\n      compressionLevel: 'medium',\n      motionBlur: true,\n      deinterlace: true\n    }\n  },\n  instagram_story: {\n    id: 'instagram_story',\n    platform: 'instagram', \n    name: 'Instagram ストーリー',\n    aspectRatio: '9:16',\n    resolution: { width: 1080, height: 1920 },\n    maxDuration: 15,\n    maxFileSize: 50,\n    recommendedBitrate: 4000,\n    audioCodec: 'aac',\n    videoCodec: 'h264',\n    frameRate: [24, 30],\n    safeArea: { top: 20, bottom: 25, left: 8, right: 8 },\n    requirements: {\n      maxDuration: 15,\n      audioRequired: false\n    },\n    optimization: {\n      cropStrategy: 'center',\n      scaleStrategy: 'fill',\n      compressionLevel: 'medium',\n      motionBlur: false,\n      deinterlace: true\n    }\n  },\n  tiktok: {\n    id: 'tiktok',\n    platform: 'tiktok',\n    name: 'TikTok',\n    aspectRatio: '9:16',\n    resolution: { width: 1080, height: 1920 },\n    maxDuration: 180,\n    maxFileSize: 150,\n    recommendedBitrate: 6000,\n    audioCodec: 'aac',\n    videoCodec: 'h264',\n    frameRate: [24, 30, 60],\n    safeArea: { top: 12, bottom: 18, left: 3, right: 3 },\n    requirements: {\n      minDuration: 3,\n      maxDuration: 180,\n      audioRequired: true,\n      captionsRecommended: true\n    },\n    optimization: {\n      cropStrategy: 'smart',\n      scaleStrategy: 'fill',\n      compressionLevel: 'low',\n      motionBlur: true,\n      deinterlace: true\n    }\n  },\n  youtube_shorts: {\n    id: 'youtube_shorts',\n    platform: 'youtube_shorts',\n    name: 'YouTube Shorts',\n    aspectRatio: '9:16',\n    resolution: { width: 1080, height: 1920 },\n    maxDuration: 60,\n    maxFileSize: 200,\n    recommendedBitrate: 8000,\n    audioCodec: 'aac',\n    videoCodec: 'h264',\n    frameRate: [24, 30, 60],\n    safeArea: { top: 10, bottom: 15, left: 5, right: 5 },\n    requirements: {\n      maxDuration: 60,\n      audioRequired: false\n    },\n    optimization: {\n      cropStrategy: 'smart',\n      scaleStrategy: 'fill',\n      compressionLevel: 'low',\n      motionBlur: false,\n      deinterlace: true\n    }\n  },\n  twitter: {\n    id: 'twitter',\n    platform: 'twitter',\n    name: 'Twitter (X)',\n    aspectRatio: '16:9',\n    resolution: { width: 1280, height: 720 },\n    maxDuration: 140,\n    maxFileSize: 512,\n    recommendedBitrate: 5000,\n    audioCodec: 'aac',\n    videoCodec: 'h264',\n    frameRate: [24, 30],\n    safeArea: { top: 5, bottom: 5, left: 5, right: 5 },\n    requirements: {\n      maxDuration: 140\n    },\n    optimization: {\n      cropStrategy: 'center',\n      scaleStrategy: 'fit',\n      compressionLevel: 'high',\n      motionBlur: false,\n      deinterlace: false\n    }\n  }\n};\n\n/**\n * SNS最適化コンポーネント\n * 各プラットフォームに最適な設定を自動適用\n */\nconst SNSOptimizer: React.FC<SNSOptimizerProps> = ({\n  project,\n  targetPlatforms,\n  onOptimizationApply,\n  onPreviewGenerate\n}) => {\n  const [selectedPlatform, setSelectedPlatform] = useState<string>('instagram_reel');\n  const [customSettings, setCustomSettings] = useState<Partial<SNSPreset>>({}); \n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [previewMode, setPreviewMode] = useState<'mobile' | 'desktop'>('mobile');\n  const [optimizationStatus, setOptimizationStatus] = useState<'idle' | 'analyzing' | 'ready' | 'error'>('idle');\n  const [analysisResults, setAnalysisResults] = useState<any>(null);\n\n  const currentPreset = SNS_PRESETS[selectedPlatform];\n  const currentDuration = project.timeline.duration;\n\n  // プロジェクトの適合性チェック\n  const compatibility = useMemo(() => {\n    if (!currentPreset) return null;\n    \n    const issues: string[] = [];\n    const warnings: string[] = [];\n    const suggestions: string[] = [];\n    \n    // 時間チェック\n    if (currentPreset.requirements.maxDuration && currentDuration > currentPreset.requirements.maxDuration) {\n      issues.push(`動画が長すぎます (${currentDuration}秒 > ${currentPreset.requirements.maxDuration}秒)`);\n    }\n    if (currentPreset.requirements.minDuration && currentDuration < currentPreset.requirements.minDuration) {\n      issues.push(`動画が短すぎます (${currentDuration}秒 < ${currentPreset.requirements.minDuration}秒)`);\n    }\n    \n    // アスペクト比チェック\n    const currentAspect = project.settings.resolution;\n    if (currentAspect !== currentPreset.aspectRatio) {\n      warnings.push(`アスペクト比が異なります (${currentAspect} → ${currentPreset.aspectRatio})`);\n      suggestions.push('自動クロップまたはスケーリングを適用します');\n    }\n    \n    // オーディオチェック\n    const hasAudio = project.timeline.audioTracks.length > 0;\n    if (currentPreset.requirements.audioRequired && !hasAudio) {\n      issues.push('音声トラックが必要です');\n    }\n    \n    // キャプション推奨チェック\n    if (currentPreset.requirements.captionsRecommended) {\n      suggestions.push('字幕の追加を検討してください');\n    }\n    \n    return {\n      score: issues.length === 0 ? (warnings.length === 0 ? 100 : 80) : 40,\n      issues,\n      warnings,\n      suggestions\n    };\n  }, [currentPreset, currentDuration, project]);\n\n  // プラットフォームアイコンの取得\n  const getPlatformIcon = (platform: string) => {\n    switch (platform) {\n      case 'instagram_reel':\n      case 'instagram_story':\n        return Instagram;\n      case 'tiktok':\n        return Smartphone;\n      case 'youtube_shorts':\n        return Monitor;\n      case 'twitter':\n        return Share2;\n      default:\n        return Square;\n    }\n  };\n\n  // 最適化の実行\n  const handleOptimize = async () => {\n    setOptimizationStatus('analyzing');\n    \n    try {\n      // 実際の実装では、ここでプロジェクトの解析と最適化を行う\n      await new Promise(resolve => setTimeout(resolve, 2000)); // 模擬処理\n      \n      const optimizedSettings = {\n        ...currentPreset,\n        ...customSettings\n      };\n      \n      setAnalysisResults({\n        originalSize: `${project.settings.resolution}`,\n        optimizedSize: `${optimizedSettings.resolution.width}×${optimizedSettings.resolution.height}`,\n        compressionSavings: '45%',\n        estimatedFileSize: `${Math.round(currentDuration * optimizedSettings.recommendedBitrate / 1000 / 8)}MB`\n      });\n      \n      onOptimizationApply(optimizedSettings);\n      setOptimizationStatus('ready');\n      \n    } catch (error) {\n      console.error('最適化エラー:', error);\n      setOptimizationStatus('error');\n    }\n  };\n\n  // プレビュー生成\n  const handlePreview = () => {\n    onPreviewGenerate(selectedPlatform);\n  };\n\n  return (\n    <div className=\"h-full bg-dark-900 overflow-y-auto\">\n      {/* ヘッダー */}\n      <div className=\"p-4 border-b border-dark-700\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <div className=\"w-8 h-8 bg-green-500 rounded-lg flex items-center justify-center\">\n            <Share2 className=\"w-4 h-4 text-white\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-white\">SNS最適化</h2>\n            <p className=\"text-sm text-gray-400\">プラットフォーム向けに自動最適化</p>\n          </div>\n        </div>\n\n        {/* プラットフォーム選択 */}\n        <div className=\"grid grid-cols-2 gap-2\">\n          {Object.values(SNS_PRESETS).map(preset => {\n            const Icon = getPlatformIcon(preset.id);\n            return (\n              <button\n                key={preset.id}\n                onClick={() => setSelectedPlatform(preset.id)}\n                className={`flex items-center space-x-2 p-3 rounded-lg border transition-all ${\n                  selectedPlatform === preset.id\n                    ? 'bg-green-500/20 border-green-500 text-green-400'\n                    : 'bg-dark-800 border-dark-600 text-gray-400 hover:text-white hover:border-dark-500'\n                }`}\n              >\n                <Icon className=\"w-4 h-4\" />\n                <div className=\"text-left\">\n                  <div className=\"text-sm font-medium\">{preset.name}</div>\n                  <div className=\"text-xs opacity-70\">{preset.aspectRatio}</div>\n                </div>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* 選択されたプラットフォームの詳細 */}\n      {currentPreset && (\n        <div className=\"p-4 border-b border-dark-700\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"text-lg font-semibold text-white\">{currentPreset.name}</h3>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => setPreviewMode(previewMode === 'mobile' ? 'desktop' : 'mobile')}\n                className=\"p-2 bg-dark-700 hover:bg-dark-600 text-gray-400 hover:text-white rounded-lg transition-all\"\n              >\n                {previewMode === 'mobile' ? <Smartphone className=\"w-4 h-4\" /> : <Monitor className=\"w-4 h-4\" />}\n              </button>\n            </div>\n          </div>\n\n          {/* プレビューフレーム */}\n          <div className=\"mb-4\">\n            <div className={`mx-auto bg-dark-800 rounded-lg overflow-hidden border-2 border-dark-600 ${\n              previewMode === 'mobile' ? 'w-32 h-56' : 'w-56 h-32'\n            }`}>\n              <div className=\"w-full h-full bg-gradient-to-b from-purple-900 to-blue-900 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"text-white text-xs font-medium mb-1\">\n                    {currentPreset.resolution.width}×{currentPreset.resolution.height}\n                  </div>\n                  <div className=\"text-gray-400 text-xs\">\n                    {currentPreset.aspectRatio}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* プラットフォーム仕様 */}\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-400\">最大時間:</span>\n                <span className=\"text-white\">{currentPreset.maxDuration}秒</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-400\">最大ファイルサイズ:</span>\n                <span className=\"text-white\">{currentPreset.maxFileSize}MB</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-400\">推奨ビットレート:</span>\n                <span className=\"text-white\">{currentPreset.recommendedBitrate}kbps</span>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-400\">フレームレート:</span>\n                <span className=\"text-white\">{currentPreset.frameRate.join(', ')}fps</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-400\">音声コーデック:</span>\n                <span className=\"text-white\">{currentPreset.audioCodec.toUpperCase()}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-400\">動画コーデック:</span>\n                <span className=\"text-white\">{currentPreset.videoCodec.toUpperCase()}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* 適合性チェック */}\n      {compatibility && (\n        <div className=\"p-4 border-b border-dark-700\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <CheckCircle className={`w-4 h-4 ${\n              compatibility.score >= 80 ? 'text-green-400' : \n              compatibility.score >= 60 ? 'text-yellow-400' : 'text-red-400'\n            }`} />\n            <h4 className=\"text-sm font-medium text-white\">適合性チェック</h4>\n            <span className={`text-sm font-medium ${\n              compatibility.score >= 80 ? 'text-green-400' : \n              compatibility.score >= 60 ? 'text-yellow-400' : 'text-red-400'\n            }`}>\n              {compatibility.score}%\n            </span>\n          </div>\n\n          {/* 問題点 */}\n          {compatibility.issues.length > 0 && (\n            <div className=\"mb-3\">\n              <div className=\"flex items-center space-x-1 mb-2\">\n                <AlertTriangle className=\"w-3 h-3 text-red-400\" />\n                <span className=\"text-xs font-medium text-red-400\">解決が必要</span>\n              </div>\n              <div className=\"space-y-1\">\n                {compatibility.issues.map((issue, index) => (\n                  <div key={index} className=\"text-xs text-gray-300 pl-4\">\n                    • {issue}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* 警告 */}\n          {compatibility.warnings.length > 0 && (\n            <div className=\"mb-3\">\n              <div className=\"flex items-center space-x-1 mb-2\">\n                <AlertTriangle className=\"w-3 h-3 text-yellow-400\" />\n                <span className=\"text-xs font-medium text-yellow-400\">注意</span>\n              </div>\n              <div className=\"space-y-1\">\n                {compatibility.warnings.map((warning, index) => (\n                  <div key={index} className=\"text-xs text-gray-300 pl-4\">\n                    • {warning}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* 提案 */}\n          {compatibility.suggestions.length > 0 && (\n            <div>\n              <div className=\"flex items-center space-x-1 mb-2\">\n                <Info className=\"w-3 h-3 text-blue-400\" />\n                <span className=\"text-xs font-medium text-blue-400\">提案</span>\n              </div>\n              <div className=\"space-y-1\">\n                {compatibility.suggestions.map((suggestion, index) => (\n                  <div key={index} className=\"text-xs text-gray-300 pl-4\">\n                    • {suggestion}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* 高度な設定 */}\n      <div className=\"p-4 border-b border-dark-700\">\n        <button\n          onClick={() => setShowAdvanced(!showAdvanced)}\n          className=\"flex items-center space-x-2 text-sm text-gray-400 hover:text-white transition-all mb-3\"\n        >\n          <Settings className=\"w-4 h-4\" />\n          <span>詳細設定</span>\n          <motion.div\n            animate={{ rotate: showAdvanced ? 180 : 0 }}\n            transition={{ duration: 0.2 }}\n          >\n            <Crop className=\"w-3 h-3\" />\n          </motion.div>\n        </button>\n\n        <AnimatePresence>\n          {showAdvanced && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"space-y-4\"\n            >\n              {/* クロップ設定 */}\n              <div>\n                <label className=\"block text-xs font-medium text-gray-400 mb-2\">\n                  クロップ方法\n                </label>\n                <select\n                  value={customSettings.optimization?.cropStrategy || currentPreset.optimization.cropStrategy}\n                  onChange={(e) => setCustomSettings(prev => ({\n                    ...prev,\n                    optimization: {\n                      ...prev.optimization,\n                      cropStrategy: e.target.value as any\n                    }\n                  }))}\n                  className=\"w-full bg-dark-700 border border-dark-600 rounded px-3 py-2 text-sm text-white\"\n                >\n                  <option value=\"center\">中央</option>\n                  <option value=\"smart\">スマート</option>\n                  <option value=\"manual\">手動</option>\n                </select>\n              </div>\n\n              {/* 圧縮レベル */}\n              <div>\n                <label className=\"block text-xs font-medium text-gray-400 mb-2\">\n                  圧縮レベル\n                </label>\n                <select\n                  value={customSettings.optimization?.compressionLevel || currentPreset.optimization.compressionLevel}\n                  onChange={(e) => setCustomSettings(prev => ({\n                    ...prev,\n                    optimization: {\n                      ...prev.optimization,\n                      compressionLevel: e.target.value as any\n                    }\n                  }))}\n                  className=\"w-full bg-dark-700 border border-dark-600 rounded px-3 py-2 text-sm text-white\"\n                >\n                  <option value=\"low\">低（高品質）</option>\n                  <option value=\"medium\">中</option>\n                  <option value=\"high\">高（小サイズ）</option>\n                </select>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* 解析結果 */}\n      {analysisResults && (\n        <div className=\"p-4 border-b border-dark-700\">\n          <h4 className=\"text-sm font-medium text-white mb-3\">最適化結果</h4>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-400\">解像度:</span>\n              <span className=\"text-white\">\n                {analysisResults.originalSize} → {analysisResults.optimizedSize}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-400\">ファイルサイズ予測:</span>\n              <span className=\"text-white\">{analysisResults.estimatedFileSize}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-400\">圧縮効果:</span>\n              <span className=\"text-green-400\">{analysisResults.compressionSavings} 削減</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* アクションボタン */}\n      <div className=\"p-4\">\n        <div className=\"space-y-3\">\n          <button\n            onClick={handlePreview}\n            className=\"w-full flex items-center justify-center space-x-2 bg-blue-500 hover:bg-blue-600 text-white py-3 px-4 rounded-lg font-medium transition-all\"\n          >\n            <Eye className=\"w-4 h-4\" />\n            <span>プレビュー生成</span>\n          </button>\n          \n          <button\n            onClick={handleOptimize}\n            disabled={optimizationStatus === 'analyzing' || (compatibility && compatibility.issues.length > 0)}\n            className={`w-full flex items-center justify-center space-x-2 py-3 px-4 rounded-lg font-medium transition-all ${\n              optimizationStatus === 'analyzing'\n                ? 'bg-gray-600 cursor-not-allowed'\n                : compatibility && compatibility.issues.length > 0\n                ? 'bg-gray-600 cursor-not-allowed'\n                : optimizationStatus === 'ready'\n                ? 'bg-green-500 hover:bg-green-600'\n                : 'bg-green-500 hover:bg-green-600'\n            } text-white`}\n          >\n            {optimizationStatus === 'analyzing' ? (\n              <>\n                <Zap className=\"w-4 h-4 animate-pulse\" />\n                <span>最適化中...</span>\n              </>\n            ) : optimizationStatus === 'ready' ? (\n              <>\n                <CheckCircle className=\"w-4 h-4\" />\n                <span>最適化完了</span>\n              </>\n            ) : (\n              <>\n                <Zap className=\"w-4 h-4\" />\n                <span>最適化実行</span>\n              </>\n            )}\n          </button>\n        </div>\n\n        {/* ヘルプテキスト */}\n        <div className=\"mt-4 text-xs text-gray-400\">\n          <div className=\"flex items-start space-x-2\">\n            <Info className=\"w-3 h-3 mt-0.5 flex-shrink-0\" />\n            <div>\n              <p className=\"mb-1\">\n                選択したプラットフォームに最適な設定でプロジェクトを自動調整します。\n              </p>\n              <p>\n                アスペクト比の変更、ファイルサイズの最適化、品質調整が含まれます。\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SNSOptimizer;"