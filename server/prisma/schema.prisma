// FlickMV Prisma schema (Supabase Postgres)
// IDs: UUID
// Datasource and generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  free
  pro
  enterprise
}

enum ProjectStatus {
  draft
  in_progress
  completed
  archived
}

enum MediaType {
  image
  video
  audio
}

enum StorageProvider {
  local
  s3
  gcs
}

enum ExportStatus {
  queued
  processing
  completed
  failed
  cancelled
}

enum CollaboratorRole {
  viewer
  editor
  admin
}

model User {
  id            String            @id @default(uuid()) @db.Uuid
  name          String
  email         String            @unique
  password      String?
  avatar        String?
  subscription  SubscriptionTier  @default(free)
  // Preferences (theme: light|dark|auto, defaultResolution: '9:16'|'1:1'|'16:9', autoSave: boolean, language?: string)
  preferences   Json?
  // Usage counters (replacing nested usage object)
  usageProjectsCount   Int         @default(0)
  usageStorageUsed     BigInt      @default(0)
  usageExportsThisMonth Int        @default(0)
  lastExportDate DateTime?
  // OAuth
  googleId      String?           @unique
  githubId      String?           @unique
  // Verification / status
  emailVerified Boolean           @default(false)
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  lastLogin     DateTime?
  isActive      Boolean           @default(true)

  // Relations
  projects      Project[]         @relation("UserProjects")
  mediaFiles    MediaFile[]
  exportJobs    ExportJob[]

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([email])
  @@index([googleId])
  @@index([githubId])
}

model Project {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  description String?
  ownerId     String        @db.Uuid
  owner       User          @relation("UserProjects", fields: [ownerId], references: [id], onDelete: Cascade)
  // Collaborators
  collaborators Collaborator[]

  // Settings/Timeline as JSON to keep flexibility
  settings    Json          // mirrors projectSettingsSchema
  timeline    Json          // clips, audioTracks, duration, zoom, playheadPosition

  thumbnail   String?
  status      ProjectStatus @default(draft)
  isPublic    Boolean       @default(false)
  tags        String[]      @db.Text[]

  // Additional metadata
  metadata    Json?

  mediaFiles  MediaFile[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([ownerId, createdAt])
  @@index([status])
  @@index([isPublic])
}

model Collaborator {
  id        String           @id @default(uuid()) @db.Uuid
  projectId String           @db.Uuid
  userId    String           @db.Uuid
  role      CollaboratorRole @default(viewer)
  addedAt   DateTime         @default(now())

  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([userId])
}

model MediaFile {
  id            String          @id @default(uuid()) @db.Uuid
  // legacyId is optional mapping for old string IDs like "media-..."
  legacyId      String?         @unique
  name          String
  originalName  String
  type          MediaType
  format        String
  url           String
  thumbnail     String?
  size          BigInt
  duration      Float?
  dimensions    Json?
  metadata      Json?

  ownerId       String          @db.Uuid
  owner         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  projectId     String          @db.Uuid
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  storage       Json?           // {provider, bucket, key, region}
  processing    Json?           // {status, progress, error, ...}
  analysis      Json?           // BPM, beats, segments, dominantColors, objects...

  tags          String[]        @db.Text[]
  isPublic      Boolean         @default(false)
  downloadCount Int             @default(0)
  lastAccessed  DateTime?       @default(now())

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([ownerId, createdAt])
  @@index([projectId])
  @@index([type])
}

model ExportJob {
  id          String       @id @default(uuid()) @db.Uuid
  // human-friendly id string from legacy (e.g., "export-..."), optional
  legacyId    String?      @unique
  name        String
  projectId   String       @db.Uuid
  userId      String       @db.Uuid

  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  settings    Json
  status      ExportStatus @default(queued)
  progress    Int          @default(0)
  priority    Int          @default(0)

  processing  Json?        // {startedAt, completedAt, processingTime, currentStep, ...}
  output      Json?        // {url, filename, size, duration, thumbnail, storage}
  analytics   Json?        // {downloadCount, lastDownloaded, ...}
  metadata    Json         // {timeline, mediaFiles[], projectSettings}

  expiresAt   DateTime?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId, createdAt])
  @@index([projectId])
  @@index([status, priority])
  @@index([expiresAt])
}